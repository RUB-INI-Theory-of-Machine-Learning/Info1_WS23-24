# Configuration
var playfield_size  = {"x": 10, "y": 20};

class Playfield {
public:
	var bitmap = [];
	var width, height;

	constructor(width, height){
		this.width = width;
		this.height = height;
		
		this.bitmap.push(Array(width + 2, "f"));
		for 0:height do {
			var row = ["f"];
			for 0:width do row.push(0);
			row.push("f");
			this.bitmap.push(row);
		};
		this.bitmap.push(Array(width + 2, "f"));
	}

	function insert_tetromino(tetromino){
		var bitmap = tetromino.bitmap();
		for var i in 0:bitmap.size() do
			for var j in 0:bitmap[i].size() do
				if bitmap[i][j] != 0 then this.bitmap[tetromino.row + i][tetromino.column + j] = bitmap[i][j];
	}

	function remove_tetromino(tetromino){
		var bitmap = tetromino.bitmap();
		for var i in 0:bitmap.size() do
			for var j in 0:bitmap[i].size() do
				if bitmap[i][j] != 0 then this.bitmap[tetromino.row + i][tetromino.column + j] = 0;
	}

	function check_collision(tetromino){
		var bitmap = tetromino.bitmap();
		for var i in 0:bitmap.size() do {
			for var j in 0:bitmap[i].size() do {
				if bitmap[i][j] != 0 then
					if this.bitmap[tetromino.row + i][tetromino.column + j] != 0 then
				return true;
			}
		}
		return false;
	}
	
	function remove_full_rows(){
		var full_rows = [];
		
		for var row in 1:this.bitmap.size()-1 do {
			var is_full = true;
			for var column in 0:this.bitmap[row].size() do {
				if this.bitmap[row][column] == 0 then {
					is_full = false;
					break;
				}
				# if column == this.bitmap[row].size()-1 then full_rows.push(row);
				
			}
			if is_full then full_rows.push(row);
		}
		
		
		for var row_idx in full_rows do {
			this.bitmap.remove(row_idx);
			var row = ["f"];
			for 0:this.width do row.push(0);
			row.push("f");
			this.bitmap.insert(1, row);
		}
		
		return full_rows.size();
	}
}


class Tetromino {
public:
	var column, row, rotation, type, max_rotations, previous_state;

	var tetrominos = {
    "o": [[
            [0,0,0,0],
            [0,"o","o",0],
            [0,"o","o",0],
            [0,0,0,0],
        ]],
    "t":[
            # The first rotation of the tetromino
            [
                [ 0,  0,  0, 0 ], # the first row
                ["t","t","t",0 ], # the second row
                [ 0, "t", 0, 0 ]  # the third row
            ],
            # The other three rotations
            [[0,"t",0,0],["t","t",0,0],[0,"t",0,0]],
            [[0,"t",0,0],["t","t","t",0],[0,0,0,0]],
            [[0,"t",0,0],[0,"t","t",0],[0,"t",0,0]]
        ],
     "s":[
            [[0,0,0,0],[0,"s","s",0],["s","s",0,0]],
            [["s",0,0,0],["s","s",0,0],[0,"s",0,0]]
        ],
    "z":[
            [[0,0,0,0],["z","z",0,0],[0,"z", "z",0]],
            [[0,"z",0,0],["z","z",0,0],["z",0,0,0]]
        ],
    "j":[
            [[0,0,0,0],["j","j","j",0],[0,0,"j",0]],
            [[0,"j",0,0],[0,"j",0,0],["j","j",0,0]],
            [["j",0,0,0],["j","j","j",0],[0,0,0,0]],
            [[0,"j","j",0],[0,"j",0,0],[0,"j",0,0]]
        ],
    "l":[
            [[0,0,0,0],["l","l","l",0],["l",0,0,0]],
            [["l","l",0,0],[0,"l",0,0],[0,"l",0,0]],
            [[0,0,"l",0],["l","l","l",0],[0,0,0,0]],
            [[0,"l",0,0],[0,"l",0,0],[0,"l","l",0]]
        ],
    "i":[
            [[0,0,0,0],[0,0,0,0],["i","i","i","i"],[0,0,0,0]],
            [[0,"i",0,0],[0,"i",0,0],[0,"i",0,0],[0,"i",0,0]],
        ]
};

	constructor(type, column, row = 1, rotation = 0){
		this.column = column;
		this.row = row;
		this.rotation = rotation;
		this.type = type;
		this.max_rotations = this.tetrominos[this.type].size();
		save_state();
	}

	function bitmap(){
		return this.tetrominos[this.type][this.rotation];
	}

	# Save state of a tetromino so we can revert to it 
	# in case we did an action that caused a collision
	function save_state() {
		this.previous_state = {
			"row": this.row,
			"column": this.column,
			"rotation": this.rotation,
		};
	}

	# revert to previously saved state
	function undo(){
		this.row = previous_state["row"];
		this.column = previous_state["column"];
		this.rotation = previous_state["rotation"];
	}

	function drop(){
		save_state();
		this.row = this.row + 1;
	}
	
	function rotate_left() {
		save_state();
		this.rotation = (this.rotation + 1) % this.max_rotations;
	}
	
	function rotate_right() {
		save_state();
		this.rotation = (this.rotation - 1) % this.max_rotations;
	}
	
	function move_left() {
		save_state();
		this.column -= 1;
	}
	
	function move_right() {
		save_state();
		this.column += 1;
	}
}

# We collect all the tools needed to draw the playfield matrix
# on the canvas here in this Renderer class
class Renderer {
public:
	var block_size, outline_size;
	# A dictionary of dictionaries of arrays containing the RGB values for the colors.
	var colors = {
		"f": {
			"base": [119, 119, 119],
			"light": [153, 153, 153],
			"dark": [51, 51, 51],
		},
		"o": { # yellow
			"base": [204, 204, 0],
			"light": [255, 255, 0],
			"dark": [153, 153, 0],
		},
		"t": { # violet
			"base": [153, 0, 204],
			"light": [204, 0, 255],
			"dark": [102, 0, 153],
		},
		"s": {
			"base": [0, 204, 0],
			"light": [0, 255, 0],
			"dark": [0, 153, 0],
		},
		"z": {
			"base": [204, 0, 0],
			"light": [255, 0, 0],
			"dark": [153, 0, 0],
		},
		"j": {
			"base": [0, 0, 204],
			"light": [0, 0, 255],
			"dark": [0, 0, 153],
		},
		"l": {
			"base": [204, 102, 0],
			"light": [255, 136, 0],
			"dark": [153, 68, 0],
		},
		"i": {
			"base": [0, 204, 204],
			"light": [0, 255, 255],
			"dark": [0, 153, 153],
		}
	};

	constructor(){
		# Define block size for a field of 10x20.
		# We calculate the vertical and horizontal block size and take the minimum.
		# This way we can guarantee, that the playfield is always completely visible.
		this.block_size = math.floor(math.min(
		canvas.height()/(playfield_size["y"]+2),
		canvas.width()/(playfield_size["x"]+2)
		));

		# We define the outline to be 1/8 of the block size
		this.outline_size = this.block_size/8;
	}

	function render(playfield) {
		 for var column in 0:playfield.bitmap.size() do
			for var row in 0:playfield.bitmap[column].size() do
				if (playfield.bitmap[column][row] != 0) then this.draw_block(column, row, playfield.bitmap[column][row]);
	}

	# This is the function that draws the block for us. It takes pos_x and pos_y as arguments.
	# Both are in the unit of blocks, as the conversion to pixels happens in this function.
	# The blocks get drawn as a square with light color, a triangle with darker color and a smaller square with base color on top of each other
	function draw_block(column, row, color) {
		var pos_x = row * block_size;
		var pos_y = column * block_size;

		# lighter edges
		canvas.setFillColor(colors[color]["light"][0]/255,
							colors[color]["light"][1]/255,
							colors[color]["light"][2]/255);
		canvas.fillRect(pos_x, pos_y, block_size, block_size);

		# triangle with dark color for the area bottom right
		canvas.setFillColor(colors[color]["dark"][0]/255,
							colors[color]["dark"][1]/255,
							colors[color]["dark"][2]/255);
		canvas.fillArea([
							[pos_x + block_size, pos_y],
							[pos_x, pos_y + block_size],
							[pos_x + block_size, pos_y + block_size]
						]);

		# smaller square in the middle
		canvas.setFillColor(colors[color]["base"][0] / 255,
							colors[color]["base"][1] / 255,
							colors[color]["base"][2]/255);
		canvas.fillRect(
			pos_x+outline_size,
			pos_y+outline_size,
			block_size-2*outline_size,
			block_size-2*outline_size
		);
	}
	
	function reset() {
		canvas.setFillColor(1, 1, 1);
		canvas.clear();
	}
}

# Our random tetromino generator
class TetrominoPool{
	public:
	var pool = [];

	function fill_pool(){
		var pool_ = ["o", "s", "z", "i", "j", "l", "t"];

	 	while pool_.size() > 0 do {
			var rand_idx = Integer((math.random() * pool_.size()));
			this.pool.push(pool_[rand_idx]);
			pool_.remove(rand_idx);
		}
	}

	function get(){
		if this.pool.size() == 0 then this.fill_pool();
		return this.pool.pop();
	}
}

var level_gravity = [
		887, 	#level 0
		820,  	#level 1
		753,	#level 2
		686,	#level 3
		619,	#level 4
		552,	#level 5
		469,	#level 6
		368,	#level 7
		285,	#level 8
		184,	#level 9
		167, 	#level 10
		151,	#level 11
		134,	#level 12
		117,	#level 13
		100,	#level 14
		100,	#level 15
		84,	 	#level 16
		84,		#level 17
		67,		#level 18
		67,		#level 19
		50,		#level 20
	];

var base_score_values = [0, 40, 100, 300, 1200];


# Main program
var pool = TetrominoPool();
var tetromino = Tetromino(pool.get(), Integer((playfield_size["x"] + 2)/2 - 2));
var playfield = Playfield(playfield_size["x"], playfield_size["y"]);
var renderer = Renderer();

# Gravity is the time in ms between two ticks. 
var level = 0;
var lines = 0;
var score = 0;
var soft_drop_start = 0;
var gravity = level_gravity[level];
var current_time = time();
var spawned = false;

# Timer event that contains the logic of creating a Tetromino, letting it drop over time and checking for (spawn) collisions
setEventHandler("timer", function(event) {
	if time() - current_time > gravity then {
		# reset time buffer
		current_time = time();
		
		# reset canvas and remove the tetromino from the playfield to do a "preliminary" drop. Before we insert the tetromino back into the playfield we have to check if that drop was legal. 
		renderer.reset();
		playfield.remove_tetromino(tetromino);
		tetromino.drop();
		if playfield.check_collision(tetromino) == true then {
			# that drop caused a collision, i.e. at least two blocks overlap. 
			tetromino.undo();
			playfield.insert_tetromino(tetromino);
			var cleared_rows = playfield.remove_full_rows();
			lines = lines + cleared_rows;
			if level <= level_gravity.size() then level = lines // 10;
			var soft_drop_points = tetromino.row - soft_drop_start;
			print(soft_drop_points);
			print(soft_drop_start);
			print(tetromino.row);
			score = score + base_score_values[cleared_rows] * (level + 1) + soft_drop_points;
			#print(lines);
			#print(level);
			#print(score);
			
			if spawned then {
				# We got a collision right after we spawned a new tetromino. Game over.
				quitEventMode();
				# Draw another tetromino on top for show (like in the original game)
				tetromino = Tetromino(pool.get(), Integer((playfield_size["x"] + 2)/2 - 2));
				playfield.insert_tetromino(tetromino);
				renderer.render(playfield);
				return;
			}
			# spawn a new tetromino
			tetromino = Tetromino(pool.get(), Integer((playfield_size["x"] + 2)/2 - 2));
			spawned = true;
		}
		else spawned = false; # the new tetromino dropped successfully, so it is just a normal collision in the next step (not a spawn collision)
		playfield.insert_tetromino(tetromino);
		renderer.render(playfield);
	}
});

# Event handler that handles all keyboard inputs
setEventHandler("canvas.keydown", function(event){
	renderer.reset();
	playfield.remove_tetromino(tetromino);
	
	if event.key == " " then {
		if soft_drop_start == 0 then soft_drop_start = Integer(tetromino.row);
		gravity = 50;
	};
	if event.key == "ArrowUp" then tetromino.rotate_left();
	if event.key == "ArrowDown" then tetromino.rotate_right();
	if event.key == "ArrowLeft" then tetromino.move_left();
	if event.key == "ArrowRight" then tetromino.move_right();
	if playfield.check_collision(tetromino) then {
		tetromino.undo(); # The action caused an invalid playfield state. Undo it. 
	}

	playfield.insert_tetromino(tetromino);
	renderer.render(playfield);
});


setEventHandler("canvas.keyup", function(event){
	if event.key == " " then {
		soft_drop_start = 0;
		gravity = level_gravity[level];
	}
});
enterEventMode();
